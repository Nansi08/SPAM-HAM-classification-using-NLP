import pandas as pd
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer, TfidfTransformer
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix
import nltk
from nltk.corpus import stopwords

# Download stopwords
nltk.download('stopwords')

# Load the dataset
def load_data(file_path):
    messages = pd.read_csv(file_path, encoding='latin-1')
    messages = messages[['v1', 'v2']]  # Assuming the dataset has columns 'v1' for labels and 'v2' for messages
    messages.columns = ['label', 'message']
    return messages

# Preprocess the text data
def preprocess_text(message):
    # Remove punctuation
    message = ''.join([char for char in message if char not in string.punctuation])
    # Convert to lowercase
    message = message.lower()
    # Remove stopwords
    message = ' '.join([word for word in message.split() if word not in stopwords.words('english')])
    return message

# Main function
def main():
    # Load data
    messages = load_data('spam.csv')  # Replace with your dataset path

    # Preprocess messages
    messages['cleaned'] = messages['message'].apply(preprocess_text)

    # Encode labels
    messages['label'] = messages['label'].map({'ham': 0, 'spam': 1})

    # Split the dataset
    X_train, X_test, y_train, y_test = train_test_split(messages['cleaned'], messages['label'], test_size=0.2, random_state=42)

    # Vectorization
    count_vectorizer = CountVectorizer()
    X_train_counts = count_vectorizer.fit_transform(X_train)
    tfidf_transformer = TfidfTransformer()
    X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)

    # Transform the test data
    X_test_counts = count_vectorizer.transform(X_test)
    X_test_tfidf = tfidf_transformer.transform(X_test_counts)

    # Train the model
    model = XGBClassifier()
    model.fit(X_train_tfidf, y_train)

    # Make predictions
    y_pred = model.predict(X_test_tfidf)

    # Evaluate the model
    print("Confusion Matrix:")
    print(confusion_matrix(y_test, y_pred))
    print("\nClassification Report:")
    print(classification_report(y_test, y_pred))

if __name__ == "__main__":
    main()
